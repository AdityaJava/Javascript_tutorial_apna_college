/******************************************************************************************
 üß© EVERYTHING ABOUT JAVASCRIPT FUNCTIONS ‚Äî From Basics to Advanced (With Explanations)
******************************************************************************************/

/*--------------------------------------
1Ô∏è‚É£ What is a Function
A function is a reusable block of code to perform a specific task.
--------------------------------------*/
function greet() {
  console.log("Hello, Aditya!");
}
greet(); // Output: Hello, Aditya!


/*--------------------------------------
2Ô∏è‚É£ Function Syntax ‚Äî Declarations, Expressions & Arrows
--------------------------------------*/

// ‚úÖ Function Declaration (Hoisted ‚Äî can be called before definition)
function add(a, b) {
  return a + b;
}
console.log(add(3, 5)); // 8

// ‚úÖ Function Expression (Not hoisted)
const multiply = function (a, b) {
  return a * b;
};
console.log(multiply(2, 4)); // 8

// ‚úÖ Arrow Function (Short syntax, no own `this`)
const divide = (a, b) => a / b;
console.log(divide(10, 2)); // 5


/*--------------------------------------
3Ô∏è‚É£ Parameters and Arguments
Parameters are placeholders; arguments are actual values.
--------------------------------------*/
function greetUser(name) {
  console.log("Hello " + name);
}
greetUser("Aditya"); // Hello Aditya

// Default Parameters (ES6 feature)
function greetDefault(name = "User") {
  console.log(`Hello ${name}`);
}
greetDefault(); // Hello User


/*--------------------------------------
4Ô∏è‚É£ Return Statement
Stops execution and returns a value.
--------------------------------------*/
function square(num) {
  return num * num;
  console.log("This won't run"); // unreachable
}


/*--------------------------------------
5Ô∏è‚É£ Types of Functions
--------------------------------------*/

// Named Function
function namedFn() {}

// Anonymous Function
const anonFn = function () {};

// Arrow Function
const arrowFn = () => console.log("Arrow!");

// IIFE (Immediately Invoked Function Expression)
(function () {
  console.log("IIFE executed immediately");
})();

// Higher-Order Function (Takes another function as argument)
function higherOrder(fn) {
  fn();
}
higherOrder(() => console.log("Called inside HOF"));

// Callback Function
setTimeout(() => console.log("Callback after 1 sec"), 1000);

// Constructor Function (Used with 'new' keyword)
function Car() {
  this.brand = "BMW";
}
const myCar = new Car();
console.log(myCar.brand); // BMW

// Generator Function (Can pause and resume)
function* gen() {
  yield 1;
  yield 2;
}
const it = gen();
console.log(it.next().value); // 1

// Async Function (Returns a Promise)
async function fetchData() {
  return "Data fetched";
}


/*--------------------------------------
6Ô∏è‚É£ Function Hoisting
Declarations are hoisted; expressions are not.
--------------------------------------*/
sayHi(); // ‚úÖ Works
function sayHi() {
  console.log("Hello");
}

// sayHello(); ‚ùå Error - Not hoisted
const sayHello = function () {
  console.log("Hi");
};


/*--------------------------------------
7Ô∏è‚É£ Scope in Functions
1. Global Scope
2. Function Scope
3. Block Scope (let, const)
--------------------------------------*/
let globalVar = "Global";

function example() {
  let functionVar = "Function";
  console.log(globalVar); // accessible
}
example();
// console.log(functionVar); // ‚ùå not accessible


/*--------------------------------------
8Ô∏è‚É£ Closures
Function remembers variables from its lexical scope even after execution.
--------------------------------------*/
function outer() {
  let count = 0;
  return function inner() {
    count++;
    console.log(count);
  };
}
const counter = outer();
counter(); // 1
counter(); // 2


/*--------------------------------------
9Ô∏è‚É£ Higher-Order Functions
Functions that take or return another function.
--------------------------------------*/
function greet(name) {
  return function (message) {
    console.log(`${message}, ${name}`);
  };
}
const greetAditya = greet("Aditya");
greetAditya("Good Morning"); // Good Morning, Aditya


/*--------------------------------------
üîü Callback Functions
Function passed as an argument to another.
--------------------------------------*/
function processData(callback) {
  console.log("Processing...");
  callback();
}
processData(() => console.log("Done!"));


/*--------------------------------------
1Ô∏è‚É£1Ô∏è‚É£ Arrow Function Deep Dive
Arrow functions inherit `this` from outer scope (lexical binding).
--------------------------------------*/
function normal() {
  console.log(this); // has its own this
}
const arrow = () => {
  console.log(this); // uses parent's this
};


/*--------------------------------------
1Ô∏è‚É£2Ô∏è‚É£ Currying
Breaking a multi-parameter function into smaller single-parameter functions.
--------------------------------------*/
function addCurrying(a) {
  return function (b) {
    return function (c) {
      return a + b + c;
    };
  };
}
console.log(addCurrying(1)(2)(3)); // 6


/*--------------------------------------
1Ô∏è‚É£3Ô∏è‚É£ Recursion
Function calling itself until a base condition is met.
--------------------------------------*/
function factorial(n) {
  if (n === 1) return 1;
  return n * factorial(n - 1);
}
console.log(factorial(5)); // 120


/*--------------------------------------
1Ô∏è‚É£4Ô∏è‚É£ Async / Await
Simplifies working with Promises.
--------------------------------------*/
async function getData() {
  try {
    const res = await fetch("https://jsonplaceholder.typicode.com/todos/1");
    const data = await res.json();
    console.log(data);
  } catch (err) {
    console.error(err);
  }
}


/*--------------------------------------
1Ô∏è‚É£5Ô∏è‚É£ Function Binding Methods
--------------------------------------*/
// call() - invoke with a specific `this` and args
// apply() - same but args in array
// bind() - returns new function with bound this
function sayHelloUser() {
  console.log(`Hello ${this.name}`);
}
const user = { name: "Aditya" };
sayHelloUser.call(user);  // Hello Aditya
sayHelloUser.apply(user); // Hello Aditya
const boundFn = sayHelloUser.bind(user);
boundFn(); // Hello Aditya


/*--------------------------------------
1Ô∏è‚É£6Ô∏è‚É£ Pure vs Impure Functions
Pure ‚Üí no side effects, depends only on inputs
--------------------------------------*/
function addPure(a, b) {
  return a + b;
}

// Impure (depends on external variable)
let c = 10;
function addImpure(a) {
  return a + c;
}


/*--------------------------------------
1Ô∏è‚É£7Ô∏è‚É£ Function Composition
Combining multiple functions for sequential data processing.
--------------------------------------*/
const add2 = (x) => x + 2;
const multiply3 = (x) => x * 3;
const compose = (f, g) => (x) => f(g(x));
const result = compose(add2, multiply3)(5); // (5*3)+2 = 17
console.log(result);


/*--------------------------------------
1Ô∏è‚É£8Ô∏è‚É£ Rest & Spread in Functions
Rest ‚Üí Collects arguments into array
Spread ‚Üí Expands array into arguments
--------------------------------------*/
function sum(...nums) {
  return nums.reduce((acc, val) => acc + val, 0);
}
console.log(sum(1, 2, 3, 4)); // 10


/*--------------------------------------
1Ô∏è‚É£9Ô∏è‚É£ Memoization
Caching results of expensive function calls.
--------------------------------------*/
function memoizedAdd() {
  const cache = {};
  return function (n) {
    if (cache[n]) return cache[n];
    console.log("Calculating...");
    cache[n] = n + 10;
    return cache[n];
  };
}
const add10 = memoizedAdd();
console.log(add10(5)); // Calculating... 15
console.log(add10(5)); // Cached 15


/*--------------------------------------
2Ô∏è‚É£0Ô∏è‚É£ Best Practices
--------------------------------------
‚úÖ Use arrow functions for small ops
‚úÖ Use declarations for reusable logic
‚úÖ Avoid global pollution
‚úÖ Prefer pure functions
‚úÖ Use default params
‚úÖ Leverage closures for encapsulation
--------------------------------------*/

console.log("‚ú® JavaScript Functions ‚Äî Complete Explained Version Loaded ‚ú®");
